// Code generated by mockery v2.36.0. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/vekaputra/tiger-kittens/internal/model"
)

// UserServiceProvider is an autogenerated mock type for the UserServiceProvider type
type UserServiceProvider struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, payload
func (_m *UserServiceProvider) Login(ctx context.Context, payload model.LoginUserRequest) (model.LoginUserResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 model.LoginUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginUserRequest) (model.LoginUserResponse, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginUserRequest) model.LoginUserResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(model.LoginUserResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.LoginUserRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, payload
func (_m *UserServiceProvider) Register(ctx context.Context, payload model.RegisterUserRequest) (model.MessageResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 model.MessageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RegisterUserRequest) (model.MessageResponse, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.RegisterUserRequest) model.MessageResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(model.MessageResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.RegisterUserRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserServiceProvider creates a new instance of UserServiceProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserServiceProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserServiceProvider {
	mock := &UserServiceProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
